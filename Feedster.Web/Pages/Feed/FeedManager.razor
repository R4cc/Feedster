@page "/feeds/manage"
@inject FeedRepository _feedRepo
@inject IJSRuntime js

<PageTitle>Feedster - Feeds</PageTitle>
<h5 class="mb-2 font-bold tracking-tight dark:text-white space-mono dark:brightness-[0.85]" style="font-size: 3.5em">Manage Feeds</h5>
<button type="button" @onclick="StartFeedCreate" class="dark:border-gray-400 dark:hover:text-white dark:hover:bg-indigo-700 dark:focus:ring-gray-800 dark:bg-indigo-600 dark:text-white shadow-md mb-4 text-gray-900 hover:text-white border border-gray-800 hover:bg-gray-900 focus:ring-2 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 ">
    <svg style="display:inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="align-middle w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <a class="align-middle" style="display:inline-block">Add Feed</a>
</button>

@if (!_feeds.Any())
{
    <br/>
    <a class="dark:brightness-[0.75] dark:text-white">No Feeds to display...</a>
}
else{
<div class="break-normal overflow-x-auto relative shadow-md rounded-lg border border-3 border-black desktop-table-width">
    <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="py-3 px-6">
                    Name
                </th>
                <th scope="col" class="py-3 px-6">
                    URL
                </th>
                <th scope="col" class="py-3 px-6">
                    Controls
                </th>
            </tr>
        </thead>
        <tbody>
        @foreach(var feed in _feeds)
        {
        <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50">
            <td class="py-4 px-6 string-char-length">
                @feed.Name
            </td>
            <td class="py-4 px-6 string-char-length">
                    @feed.RssUrl
            </td>
            <td class="py-4 px-6">
                <div class="flex flex-col space-y-2">
                    <div class="inline-flex rounded-md shadow-sm dark:brightness-[0.85]" role="folder">
                        <button @onclick="() => StartFeedEdit(feed)" type="button" class=" inline-flex items-center py-2 px-4 text-sm font-medium text-gray-900 bg-transparent rounded-l-lg border border-gray-900 hover:bg-gray-900 hover:text-white focus:z-10 focus:ring-2 focus:ring-gray-500 focus:bg-gray-900 focus:text-white dark:border-white dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:bg-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                            </svg>
                            Edit
                        </button>
                        <button @onclick="() => FetchFeed(feed)" disabled="@_updatingFeeds.Contains(feed.FeedId)" type="button" class="inline-flex items-center py-2 px-4 text-sm font-medium text-gray-900 bg-transparent border border-gray-900 hover:bg-gray-900 hover:text-white focus:z-10 focus:ring-2 focus:ring-gray-500 focus:bg-gray-900 focus:text-white dark:border-white dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:bg-gray-700 @(_updatingFeeds.Contains(feed.FeedId) ? "opacity-50 cursor-not-allowed" : string.Empty)">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.712A8.973 8.973 0 0112 3c2.525 0 4.815.99 6.517 2.583m1.504 2.012a8.954 8.954 0 011.5 4.905 8.964 8.964 0 01-7.086 8.886m-1.513-.134A8.954 8.954 0 013 11.318" />
                            </svg>
                            Update
                        </button>
                        <button @onclick="() => StartDeleteFeed(feed)" type="button" class="inline-flex items-center py-2 px-4 text-sm font-medium text-gray-900 bg-transparent rounded-r-md border border-gray-900 hover:bg-gray-900 hover:text-white focus:z-10 focus:ring-2 focus:ring-gray-500 focus:bg-gray-900 focus:text-white dark:border-white dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:bg-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                            </svg>
                            Delete
                        </button>
                    </div>
                </div>
            </td>
        </tr>
        }
        </tbody>
    </table>
</div>
}

<!-- Slideover for editing / creation -->
<SlideOver>
    <EditForm Model="_feed" OnValidSubmit="SaveChanges">
        <DataAnnotationsValidator/>
        
        <h5 class="mb-2 font-bold tracking-tight dark:text-white" style="font-size: 1.5em">Create a new Feed</h5>
        <label for="Name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">Name</label>
        <div class="relative mb-6">
            <InputText @bind-Value="_feed.Name" type="text" id="Name" class="form-control mb-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="e.g. 'Hacker News'"/>
            <ValidationMessage For="@(() => _feed.Name)" />
        </div>
        <label for="RssUrl" class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">RSS URL</label>
        <div class="relative mb-6">
            <InputText  @bind-Value="_feed.RssUrl" type="text" id="RssUrl" class="form-control mb-1 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="e.g. 'https://news.ycombinator.com/rss'"/>
            <ValidationMessage For="@(() => _feed.RssUrl)" />
            </div>
        <button type="submit" class="dark:border-gray-400 dark:hover:text-white dark:hover:bg-indigo-700 dark:focus:ring-gray-800 dark:bg-indigo-600 dark:text-white float-right mb-4 text-gray-900 hover:text-white border border-gray-800 hover:bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Save</button>
    </EditForm>
</SlideOver>

@_confirmationModalFragment
@_notification

@code {
    private List<Feed> _feeds = new();
    private Feed _feed = new(){FeedId = -1};
    private Feed? _feedToRemove = null;
    private RenderFragment? _confirmationModalFragment = null;
    private RenderFragment? _notification = null;
    private HashSet<int> _updatingFeeds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFeeds();
    }

    private async Task SaveChanges()
    {
        if (_feed.FeedId  == -1)
        {
            _feed.FeedId = 0;
            await _feedRepo.Create(_feed);
            ShowNotification("Feed added!", "It can take up to 2 minutes until all the information has been fetched.", NotificationType.Success);
        }
        else
        {
            await _feedRepo.Update(_feed); 
            ShowNotification("Feed updated!", "The feed was updated successfully.", NotificationType.Success);
        }

        var articleCount = await _feedRepo.FetchFeed(_feed);

        if (articleCount is null)
        {
            ShowNotification("Feed update failed!", $"Could not fetch '{_feed.Name}'.", NotificationType.Error);
        }
        else if (articleCount == 0)
        {
            ShowNotification("No articles found!", $"'{_feed.Name}' did not return any articles.", NotificationType.Info);
        }
        else
        {
            ShowNotification("Feed updated!", $"Fetched {articleCount} articles for '{_feed.Name}'.", NotificationType.Success);
        }

        await js.InvokeVoidAsync("toggleSlideover");
        await LoadFeeds();
    }    
    
    private async Task StartFeedEdit(Feed feed)
    {
        _feed = feed;
        await js.InvokeVoidAsync("toggleSlideover");
    }    
    
    private async Task StartFeedCreate()
    {
        _feed = new(){FeedId = -1};
        await js.InvokeVoidAsync("toggleSlideover");
    }

    private async Task LoadFeeds()
    {
        _feeds = await _feedRepo.GetAll();
    }
    
    private async Task ConfirmationModalResult(bool isConfirmation)
    {
        if (isConfirmation && _feedToRemove is not null)
        {
            await DeleteFeed(_feedToRemove);
        }
        _feedToRemove = null;
        _confirmationModalFragment = null;
    }

    private void StartDeleteFeed(Feed feedToRemove)
    {
        _feedToRemove = feedToRemove;
        _confirmationModalFragment = @<ConfirmationModal
                                         Title="Delete Feed"
                                         Summary="Are you sure you want to delete this feed?"
                                         OnUserSelection=ConfirmationModalResult/>;
    }

    private async Task DeleteFeed(Feed feedToRemove)
    {
        await _feedRepo.Remove(feedToRemove);
        await LoadFeeds();
        ShowNotification("Feed deleted!", "The feed was deleted successfully.", NotificationType.Success);
    }

    private async Task FetchFeed(Feed feed)
    {
        _updatingFeeds.Add(feed.FeedId);
        ShowNotification("Feed update started!", $"Fetching '{feed.Name}'.", NotificationType.Info);
        StateHasChanged();
        var articleCount = await _feedRepo.FetchFeed(feed);
        _updatingFeeds.Remove(feed.FeedId);

        if (articleCount is null)
        {
            ShowNotification("Feed update failed!", $"Could not fetch '{feed.Name}'.", NotificationType.Error);
        }
        else if (articleCount == 0)
        {
            ShowNotification("No articles found!", $"'{feed.Name}' did not return any articles.", NotificationType.Info);
        }
        else
        {
            ShowNotification("Feed updated!", $"Fetched {articleCount} articles for '{feed.Name}'.", NotificationType.Success);
        }
    }
    
    private void ShowNotification(string title, string summary, NotificationType type = NotificationType.Info)
    {
        _notification = @<Notification Title="@title" Summary="@summary" Type="@type" IsShown="true"/>;
    }
}